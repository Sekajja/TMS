<?xml version="1.0" encoding="UTF-8"?>

<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.0.xsd 
			">

	<!-- Security -->	
	<!-- enable use-expressions -->
	<!-- Enables Spring Security -->
	<http auto-config="true" use-expressions="true">
		<!-- <intercept-url pattern="/welcome**" access="hasRole('Project Delegate')" 
			/> -->

		<intercept-url pattern="/login" access="permitAll" />
		<intercept-url pattern="/admin"
			access="hasAuthority('ROLE_System_Administrator')" />
			
		<form-login login-processing-url="/j_spring_security_check"
		 login-page="/login" 		
		 username-parameter="j_username"
		 password-parameter="j_password"
					authentication-failure-url="/login?failed=true"
					default-target-url="/welcome" />
		<csrf/>

		<logout invalidate-session="true" 
				logout-success-url="/login"
				logout-url="/logout"
				/>
				
		<!-- access denied page -->
		<access-denied-handler error-page="/403" />
		

	</http>


	<beans:bean name="bcryptEncoder"
class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

	<!-- Declare an authentication-manager to use a custom userDetailsService -->
	<authentication-manager>
<!-- 		<authentication-provider user-service-ref="userDetailsService"> -->
		<authentication-provider>
			<password-encoder ref="bcryptEncoder"/>	
			<jdbc-user-service data-source-ref="myDataSource"
				users-by-username-query="select user_name, password, enabled
									from projectuser where user_name = ?"
				authorities-by-username-query="select p.user_name, r.role from 
          							userrole r, projectuser p, projectuser_userrole pr
									where pr.projectusersunderrole_id = p.id and pr.userroles_userroleid = r.userroleid and p.user_name = ?" />		
		</authentication-provider>
	</authentication-manager>
	
	<beans:bean id="userDetailsService" class="project.iics.tms.services.security.MyUserDetailsService"> 
	</beans:bean>
	
		<beans:bean id="myDataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<beans:property name="driverClassName" value="org.postgresql.Driver" />
		<beans:property name="url"
			value="jdbc:postgresql://localhost:5432/tms" />
		<beans:property name="username" value="postgres" />
		<beans:property name="password" value="cancer" />
	</beans:bean>
	
	
	
	




	<!-- Use a Md5 encoder since the user's passwords are stored as Md5 in the 
		database -->
	<!-- <beans:bean class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" 
		id="passwordEncoder"/> -->

	<!-- //////////////////////////////////////Direct Access success////////////////////////////////////////////////////////////////////// -->


	<!-- <authentication-provider> <jdbc-user-service data-source-ref="myDataSource" 
		users-by-username-query="select user_name, password, enabled from projectuser 
		where user_name = ?" authorities-by-username-query="select r.role, p.user_name 
		from userrole r, projectuser p, projectuser_userrole pr where pr.projectusers_id 
		= p.id and pr.userroles_userroleid = r.userroleid and p.user_name = ?" /> -->


	<!-- //////////////////////////////////////In Memory success////////////////////////////////////////////////////////////////////// -->
	<!-- Select users and user_roles from database... Or -->
	<!-- An in-memory list of users. No need to access an external database 
		layer. See Spring Security 3.1 Reference 5.2.1 In-Memory Authentication -->
		
	<!-- john's password is admin, while jane;s password is user -->
	<!-- <user-service id="userDetailsService"> 
			<user name="john" password="admin" 
		authorities="Project Delegate,System Administrator" /> 
			<user name="jane" 
		password="user" authorities="Project Delegate" /> 
			<user name="sekajja" password="cancer" 
		authorities="Project Delegate,System Administrator" /> 
			<user name="user" 
		password="user" authorities="Project Delegate" /> 
		</user-service> 
		
		
		<beans:bean 
		id="myUserDetailsService" class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl" 
		> 
		<beans:property name="dataSource" ref ="myDataSource"></beans:property> 
		<beans:property name="usersByUsernameQuery" 
						value="select user_name, password, 
		enabled from projectuser where user_name = ?" >
		</beans:property> 
		<beans:property name="authoritiesByUsernameQuery" 
						value="select r.role, p.user_name from 
		userrole r, projectuser p, projectuser_userrole pr where pr.projectusers_id 
		= p.id and pr.userroles_userroleid = r.userroleid and p.user_name = ?" >
		</beans:property> 
		<beans:property name="rolePrefix" value="ROLE_">
		</beans:property> 
		</beans:bean> 


		

		<authentication-provider>
			<jdbc-user-service data-source-ref="myDataSource"
				users-by-username-query="select user_name, password, enabled
									from projectuser where user_name = ?"
				authorities-by-username-query="select r.role, p.user_name from 
          							userrole r, projectuser p, projectuser_userrole pr
									where pr.projectusersunderrole_id = p.id and pr.userroles_userroleid = r.userroleid and p.user_name = ?" />		
		</authentication-provider>


		<beans:bean id="myDataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<beans:property name="driverClassName" value="org.postgresql.Driver" />
		<beans:property name="url"
			value="jdbc:postgresql://localhost:5432/tms" />
		<beans:property name="username" value="postgres" />
		<beans:property name="password" value="cancer" />
	</beans:bean>
	
	
	<beans:bean id="userDetailsService" class="project.iics.tms.services.security.MyUserDetailsService"> 

	</beans:bean>
	

-->
	<!-- End of Security -->


</beans:beans>